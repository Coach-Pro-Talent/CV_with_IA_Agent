recuperer_github_repo:
  description: >
    Récupérer et enrichir les informations des dépôts GitHub de l'utilisateur afin de mieux évaluer leur pertinence.

    Étapes : 1. Utiliser `GithubTool` pour récupérer la liste des dépôts de l'utilisateur. 2. Analyser et enrichir les données avec des informations supplémentaires :
       - Pertinence du projet
       - Fonctionnalités principales
       - Complexité du projet
       - Impact potentiel du projet
       - Technologies utilisées
       - Niveau de maturité (prototype, MVP, production)
       - Contributions majeures
       - Autres insights utiles
    3. Sauvegarder les résultats dans `output/project_repo.json` en utilisant `FileWriterTool`.

  expected_output: >
    Un fichier JSON contenant :
      - name_repo : Nom du dépôt
      - content_repo : Contenu du dépôt
      - topics_repo : Thématiques associées
      - description_repo : Description du dépôt
      - languages_repo : Langages utilisés
      - fonctionnalites_principales : Fonctionnalités clés
      - pertinence_projet : Niveau de pertinence
      - complexite_projet : Facile / Moyen / Avancé
      - impact_projet : Évaluation de l'impact
      - maturite_projet : Prototype / MVP / Production
      - contributions_majeures : Contributions importantes au projet
      - autres_informations : Autres insights utiles

analyser_offre:
  description: >
    Analyser une offre d'emploi afin d'en extraire les éléments clés pour optimiser la candidature de l'utilisateur.

    Étapes : 1. Lire et analyser la description du poste {job_description}. 2. Identifier les éléments essentiels :
       - Hard skills requis
       - Soft skills recherchés
       - Exigences obligatoires (Must-have)
       - Compétences appréciées (Nice-to-have)
       - Opportunités et recommandations pour améliorer la candidature
       - Niveau d'expérience recherché
       - Secteur d'activité et tendances du marché
    3. Sauvegarder les résultats dans `output/job_description_synthetise.txt` en utilisant `FileWriterTool`.

  expected_output: >
    Un fichier texte formaté contenant :
      - Hardskills
      - Softskills
      - Must-have
      - Nice-to-have
      - Opportunités pour booster la candidature
      - Points de vigilance et conseils
      - Niveau d'expérience recommandé
      - Tendances du marché et secteur d'activité
selectionner_meilleurs_projets:
  description: >
    Identifier les projets les plus pertinents en fonction des attentes du poste pour maximiser les chances de succès.

    Étapes : 1. Lire le fichier `output/job_description_synthetise.txt` pour extraire les exigences du poste (`FileReadTool`). 2. Lire le fichier `output/project_repo.json` contenant les informations des projets (`FileReadTool`). 3. Effectuer un matching et sélectionner les {nombre_projet} projets les plus adaptés au poste. 4. Justifier chaque sélection avec des éléments concrets. 5. Analyser les écarts entre les compétences requises et les compétences projet. 6. Sauvegarder les résultats dans `output/top_project.json` en utilisant `FileWriterTool`.

  expected_output: >
    Un fichier JSON contenant :
      - nom_projet : Nom du projet sélectionné
      - description : Description détaillée du projet
      - taches_principales : Liste des tâches principales (méthode STAR)
      - pertinence_pour_le_poste : Justification du choix
      - technologies_utilisees : Technologies principales du projet
      - niveau_de_complexite : Facile / Moyen / Avancé
      - ecarts_competences : Différences entre compétences projet et poste
      - autres_informations : Autres insights pertinents
fournir_des_recommandations:
  description: >
    Générer des recommandations de projets et de ressources pour aider l'utilisateur à maximiser ses chances.

    Étapes : 1. Lire `output/job_description_synthetise.txt` pour comprendre les attentes du poste (`FileReadTool`). 2. Lire `output/top_project.json` pour analyser les projets sélectionnés (`FileReadTool`). 3. Proposer des recommandations personnalisées en fonction des compétences de l'utilisateur et des tendances du marché. 4. Enrichir avec des ressources d’apprentissage (liens, formations, tutoriels, networking, etc.). 5. Sauvegarder les recommandations dans `output/recommandations.json` en utilisant `FileWriterTool`.

  expected_output: >
    Un fichier JSON contenant :
      - nom_projet : Nom du projet recommandé
      - taches : Liste des tâches associées
      - technologies : Technologies impliquées
      - ressources_utiles : Liste de liens utiles pour approfondir les compétences
      - opportunites_de_networking : Conférences, forums et événements pertinents

create_cv:
  description: >
    Générer un CV technique optimisé en utilisant les projets et recommandations précédemment identifiés.

    Étapes : 1. Lire `output/recommandations.json` pour extraire les recommandations (`FileReadTool`). 2. Lire `output/top_project.json` pour récupérer les projets les plus pertinents (`FileReadTool`). 3. Structurer un CV technique attractif en Markdown avec icônes et mise en forme avancée. 4. Personnaliser le CV en fonction des attentes du poste. 5. Sauvegarder le CV dans `output/cv_optimise.md`.

  expected_output: >
    Un fichier Markdown contenant :
      - Informations personnelles
      - Résumé des compétences
      - Projets pertinents pour le poste
      - Formations et certifications recommandées
      - Expériences mises en avant en lien avec le poste
      - Présentation visuelle optimisée avec icônes et mise en forme avancée
