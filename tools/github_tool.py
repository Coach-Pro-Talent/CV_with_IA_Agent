from pydantic import BaseModel
from crewai.tools import BaseTool
from github import Github, Auth
import os
from crewai.knowledge.source.text_file_knowledge_source import TextFileKnowledgeSource



"""# üõ†Ô∏è üîß **Personnalisation de notre tool**

- **Importation des modules n√©cessaires** : Importer crewai.tools, pydantic, typing, et github.
- **Fonction get_readme_content** : R√©cup√©rer le contenu du fichier README.md d'un repository GitHub.
- **Mod√®le GithubToolInput** : D√©finir le champ obligatoire, token, pour l'authentification GitHub.
- **Classe GithubTool** : D√©finir l'outil pour r√©cup√©rer les informations des repositories en utilisant le token utilisateur.
- **M√©thode _run** : Authentifier via GitHub, r√©cup√©rer les repositories et extraire les informations essentielles (contenu du README, sujets, description, langues) pour chaque repository, puis retourner les donn√©es collect√©es.
"""

"""
Il est question ici pour de r√©cup√©rer le contenu de chaque repository
"""
def get_readme_content(repo):
        try:
            contents = repo.get_contents("README.md")
            return contents.decoded_content.decode()
        except Exception as e:
            return None


# class GithubToolInput(BaseModel):
#     """Input schema for MyCustomTool."""
#     token: str = Field(..., description="token github de l'utilisateur pour se connecter √† son compte github et avoir acc√®s √† ses repositories")

class GithubTool(BaseTool):
    name: str = "R√©cup√©rer des informations sur les repositories d'un candidat"
    description: str =(
            "Recuperer les informations sur les repositories en prenant en param√®tres le token de l'utilisateur"
    )

    # args_schema: Type[BaseModel] = GithubToolInput

    def _run(self):
        token = os.environ["GITHUB_TOKEN"]
        auth = Auth.Token(token)
        g = Github(auth=auth)
        result = []
        for repo in g.get_user().get_repos():
            readme_content = get_readme_content(repo)
            topics = repo.get_topics()
            description = repo.description
            languages = repo.get_languages()

            if readme_content:
                print(f"Processing repo : {repo.name}")
                data = {
                    "name": repo.name,
                    "content": readme_content,
                    "topics": topics,
                    "description": description,
                    "languages": languages
                }

                result.append(data)
        return result